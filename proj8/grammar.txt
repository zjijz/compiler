<block>		    ->	begin <statement list> end
<statement list>->	<statement> {, <statement>}
<statement>		->	<id_statement>
                    | <declaration>;
                    | read( <id list> );
                    | write( <expr list> );
                    | <if_statement>
                    | <while_statement>
                    | return <expr_bool>
<declaration>	->	<type> <dec list>
<dec list>      ->  <dec term> { , <dec term> }
<dec term>      ->  <ident> [ := <expr_bool> ] **ALlowed only once

<id_statement>  ->  <ident> <id_state_body>
<id_state_body> ->  <func>
                    | <assignment> ;

<func>          ->  ( <func_gen> <func_tail>
<func_gen>      ->  <func_dec>
                    | <func_call>
		    | (empty)
<func_dec>      ->  <type> [ref] <ident> {, <type> [ref] <ident>}
<func_call>     ->  <ident> {, <ident> }
<func_tail>     ->  ) <func_tail_gen>
<func_tail_gen> ->  <func_tail_dec>
                    | <func_tail_call>
<func_tail_dec> ->  [> <type>] <block>
<func_tail_call>->  ;

<assignment>	->	:= <expr_bool>

<if_statement>  ->  if <expr_bool> then <block> [else <block>]

<while_statement>-> while <expr_bool> <block>

<id list>		->	<ident> {, <ident>}
<expr list>		->	<expr_bool> {, <expr_bool> }

<expr_bool>     ->  <term_bool> { <log_or> <term_bool> }
<term_bool>     ->  <expr_eq> { <log_and> <expr_eq> }
<expr_eq>       ->  <expr_relation> { <equal_op> <expr_relation> }
<expr_relation> ->  <expr_arith> { <rel_op> <expr_arith> }
<expr_arith>    ->  <term_arith> { <unary_add_op> <term_arith> }
<term_arith>    ->  <fact_arith> { <mul_op> <fact_arith> }
<fact_arith>    ->  <unary_op> <term_unary>
                    | <unary_add_op> <term_unary>
                    | <term_unary>
<term_unary>    ->  <literals>
                    | <ident>
                    | ( expr_bool )

# Everything under this needs to store the token in the tree node
<type>          ->  INT
                    | FLOAT
                    | STRING
                    | BOOL
<ident>			->	ID

# Order is operator preference
<literal>       ->  INTLIT
                    | FLOATLIT
                    | STRINGLIT
                    | BOOLLIT
<unary_op>      ->  LOG_NEGATION
<mul_op>        ->  MULTIPLY
                    | DIVIDE
                    | MODULO
<add_op>		->	ADD | MINUS
<rel_op>        ->  LESS_EQUAL
                    | GREATER_EQUAL
                    | LESS
                    | GREATER
<equal_op>      ->  EQUAL
                    | NOT_EQUAL
<log_and>       ->  LOG_AND
<log_or>        ->  LOG_OR
