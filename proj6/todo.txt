Queue for Recent Variables
-Could optimize this to better keep variables in registers to minimize
 read/write to RAM
  - LinkedList to be able to easily move values already on list when seeing them?
 ______________________________
 Compiler Flags
 - Levels of Optimization for Compiler
   - O1: (Default) Code will be compiled in a way that the best programmer would write it
     - Good register management
     - Minimum read / writes to RAM
   - O2: Things that would be beneficial, but annoying for a programmer to do
     - Keeping one (or a few) memory addresses and using offsets from these addresses
   - O3: Restructuring code
     - Inlining functions
     - Loop unrolling
     - Recursion unrolling
     - Evaluation of variables to see if insturctions can be moved around to better facilitate register management
 ______________________________
 Optimizations
 - Keeping track of current variable values in sym_table to further reduce calls to read from RAM (O1)
   (Since initialization can be done with immediates instead of loading addresses and values)
   - Done for 'int'
 - Change Queue to be a more complete LinkedList (O1)
 - Allowing a register to track more than one variable (for instance, in situations of equality)(O1)
   - The register would then just have to know it has two values, and save off both whenever the register is freed
 - Add code to track what's in $a0, $a1, and $v0 (use these registers as potential places to store variables)
 - Write a way to evaluate if only the address of a variable is needed (O2)
 - When variables are initialized using read, they are loaded into memory, even though they don't need to be
    - because value is null before
 - Analyzer that looks at an expression and removes unnecessary parenthesis
    - merges expression siblings with addition or subtraction between the two
 - Add a 'used' field to the symbol table that allows a variable that was never used to not be written to .data section
    - i.e. when an immediate is able to be traced
 ______________________________
 Errors
 - None
 ______________________________
 Improvements
 - Pretty Print for sym_table, reg_table, aux_reg_table, float_reg_table, and var_queue
 - Helper function / class to make dictionaries for use with var_queue

 - Create a funciton that will recurse down and look through tree nodes until it finds a designated one

 - Abstract out the common parts of expression more
   - In expr_bool, make it so optimization level 3 breaks once it finds a static True with or (no point processing the rest)
   - In term_bool, make optimization level 3 break once if finds a static False
 - Abstract assign_id and process_id  more (the part where they load val and address registers)
 - Figure out if multiplicatin / division / modulo can be optimized

 - Bools are only statically analyzed right now, add in an option to read them in from command line
   - Bools can be better optimized by keeping track of coprocessor 1 flags that contain them (there are 8 I think)
     - Keep a boolean 'register' table of coprocessor 1 flags

 - Abstract out a way to coerce ints to floats

 - Devise a way to pass down the accumulator register to child functions if there is only one term in the expression (i.e. it 'fell' through to a lower expression)
 ______________________________
 Project 6
 - Bool type (statically analyzed)
 - String type (rewrite find_free_register and update_tables to update all sym table entries with the same mem_name)
    - Statically analyze strings, and allow for more than one variable to be mapped to the same 'string'
 - Float type
    - build a home-brew decimal to float to normal binary represenation to use float immediates
    - use $1 ($at) for loading the value using li
    - then use move to move it to a float register ($f13)
 - Bool ops
 - Relational ops
 - New arithmetic ops (unary negation, *, /, %)
 - Mixed int and float expressions (casting int to float implicitly)
______________________________
Features
- Static analysis of integers, booleans, floats, and strings
- Dynanmic register management with different register pools for integers and floats
- Tracks auxiliary registers to minimize unnecessary moves to syscall registers
- Safe mode and unsafe mode (unsafe mode uses registers that are normally supposed to be saved without saving them off)
- Debug mode that shows debugging on the parser and prints out the code generator tables
